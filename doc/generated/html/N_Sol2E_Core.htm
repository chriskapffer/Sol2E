<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:mtps="http://msdn2.microsoft.com/mtps" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Sol2E.Core Namespace</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Sol2E.Core namespace" />
    <meta name="Microsoft.Help.F1" content="Sol2E.Core" />
    <meta name="Microsoft.Help.Id" content="N:Sol2E.Core" />
    <meta name="Description" content="This is the engines back bone. It contains the definition of Scene, Entity, Component, AbstractDomainSystem and others. Scenes, entities and components are internally managed by the Database class." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Sol2E.Core" />
    <meta name="file" content="N_Sol2E_Core" />
    <meta name="guid" content="N_Sol2E_Core" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="N:Sol2E.Core" />
      <MSHelp:TOCTitle Title="Sol2E.Core Namespace" />
      <MSHelp:RLTitle Title="Sol2E.Core Namespace ()" />
      <MSHelp:Keyword Index="A" Term="N:Sol2E.Core" />
      <MSHelp:Keyword Index="A" Term="frlrfSol2ECore" />
      <MSHelp:Keyword Index="K" Term="Sol2E.Core namespace" />
      <MSHelp:Keyword Index="F" Term="Sol2E.Core" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="C#" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="This is the engines back bone. It contains the definition of Scene, Entity, Component, AbstractDomainSystem and others. Scenes, entities and components are internally managed by the Database class." />
    </xml>
    <xml id="BrandingData">
      <string id="BrandingProductTitle">Documentation of Sol2E Game Engine generated by Sandcastle</string>
      <string id="BrandingCopyrightText">Documentation of Sol2E Game Engine (c) 2012 by Christoph Kapffer</string>
      <string id="BrandingCopyrightLink" />
      <string id="BrandingCopyrightInfo">Documentation of Sol2E Game Engine (c) 2012 by Christoph Kapffer</string>
      <string id="BrandingHeader">Sol2E.Core Namespace</string>
      <string id="BrandingFooterText" />
      <string id="BrandingFeedbackAlias" />
      <string id="BrandingFeedbackSubject">Documentation of Sol2E Game Engine generated by Sandcastle</string>
      <string id="BrandingFeedbackText">Send Feedback</string>
      <string id="BrandingFeedbackFooterTo" />
      <string id="BrandingFeedbackFooterText">on this topic.</string>
      <string id="BrandingFeedbackFooterTextTo">on this topic to .</string>
      <string id="BrandingFeedbackBody">Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.</string>
      <list id="BrandingLanguages">
        <value>C#</value>
      </list>
      <list id="BrandingSyntaxLanguages">
        <value>C#</value>
      </list>
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/Presentation.css" />
  </head>
  <body class="primary-mtps-offline-document">
    <div class="topic">
      <div class="majorTitle" />
      <div class="title">Sol2E.Core Namespace</div>
      <table id="topTable" style="display:none">
        <tr>
          <td id="titleColumn" />
        </tr>
        <tr>
          <td id="runningHeaderColumn" align="right">Documentation of Sol2E Game Engine generated by Sandcastle</td>
        </tr>
      </table>
      <div id="mainSection">
        <div id="mainBody">
          <span class="introStyle">
            <br />
            <br />
          </span>
          <div class="summary">This is the engines back bone. It contains the definition of Scene, Entity, Component, AbstractDomainSystem and others. Scenes, entities and components are internally managed by the Database class.</div>
          <mtps:CollapsibleArea runat="server" Title="Classes">
            <xml>
              <string id="Title">Classes</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Class</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_AbstractDomainSystem.htm">AbstractDomainSystem</a>
                </td>
                <td>
                  <div class="summary">
            Abstract implementation of IDomainSystem, to decorate it with the disposable pattern
            and a profiler to measure the update calls.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_AbstractGraphicsSystem.htm">AbstractGraphicsSystem</a>
                </td>
                <td>
                  <div class="summary">
            Abstract implementation of IGraphicsSystem, to decorate it with the disposable pattern
            and a second profiler to measure the draw calls.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_Component.htm">Component</a>
                </td>
                <td>
                  <div class="summary">
            An abstract base class for all kinds of components.
            It doesn't contain any fields except for one single identifier.
            
            It provides basic common methods for data acccess as well as lifecycle,
            ownership and data management. 
            The methods themself do not perform any actions, but wrap the functionality
            of the unterlying database to make it accessible in a way to be easily
            understood by clients.
            
            A class derived from this, shouldn't have to implement anything else but
            public properties. However those properties have to invoke the
            ComponentChangedEvent if clients should be notified about their changes.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_ComponentChangedEvent_1.htm">ComponentChangedEvent<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td>
                  <div class="summary">
            Static event, where clients can register to, to listen for component changes.
            Component changes occur if any of its properties have been modified.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_ComponentProperty_2.htm">ComponentProperty<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>TValue, TOwner<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td>
                  <div class="summary">
            Generic component property. This was an attempt to get rid of redundant code.
            Instead of writing something like this all the time
            
            private Vector3 _linearVelocity;
            public Vector3 LinearVelocity
            {
                get
                {
                    return _linearVelocity;
                }
                set
                {
                    if (value != _linearVelocity)
                    {
                        _linearVelocity = value;
                        ComponentChangedEvent&lt;Movement&gt;.Invoke(this, "LinearVelocity");
                    }
                }
            }
            
            the ComponentProperty class would have allowed me to write this instead
            
            [ComponentPropertyAttribute(Name = "LinearVelocity")]
            ComponentProperty&lt;Vector3, Movement&gt; LinearVelocity { get; set; }
            
            Unfortunately this is not possible, because ComponentChangedEvent&lt;Movement&gt;.Invoke(..)
            needs a reference to the instance of Movement where LinearVelocity resides in.
            
            I even tried putting a reference inside ComponentPropertyAttribute like this
            
            [ComponentPropertyAttribute(Name = "LinearVelocity", Host = this)]
            ComponentProperty&lt;Vector3, Movement&gt; LinearVelocity { get; set; }
            
            But that fails to compile at 'Host = this', because an attribute argument must be
            a constant expression. So this is why the whole thing is useless.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_ComponentPropertyAttribute.htm">ComponentPropertyAttribute</a>
                </td>
                <td>
                  <div class="summary">
            Custom attribute to decorate properties with a name
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/protclass.gif" alt="Protected class" title="Protected class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_Database.htm">Database</a>
                </td>
                <td>
                  <div class="summary">
            The heart of the engine! The whole thing consists of three dictionaries, which each
            map either a scene, an entity or a component to its id. Furthermore there are three
            other dictionaries, which are used to speed up the access to an entity or a component.
            These dictionaries operate only on the ids to keep a small memory print.
            
            All methods are solely used within this assembly, thus making this class internal.
            Documentation for most methods is not existent, as their names give enough information.
            However there are a few private helper methods, which keep all the dictionaries consistent.
            They are well documented.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_Entity.htm">Entity</a>
                </td>
                <td>
                  <div class="summary">
            A logical representation of an entity (or game object).
            
            This class doesn't contain any fields except for one single identifier.
            However it does contain methods for data acccess as well as lifecycle,
            persistency, ownership and data management. 
            The methods themself do not perform any actions, but wrap the functionality
            of the unterlying database to make it accessible in a way to be easily
            understood by clients.
            
            The behaviour of an entity is solely defined by the components it contains.
            As stated above, the entity actually does not contain any components, but they
            are associated to its id. These relations are managed by the database.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_EntityChangedEvent.htm">EntityChangedEvent</a>
                </td>
                <td>
                  <div class="summary">
            Static event, where clients can register to, to listen for entity changes.
            Entity changes occur if a component has been added or removed or deserialized.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_EntityState.htm">EntityState</a>
                </td>
                <td>
                  <div class="summary">
            Class to store an entity snapshot. Contains serialized entity data (all components
            assigned to this entity and their configuration) as byte array and the id of the
            entity to which the data belongs to.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_EnumerableExtension.htm">EnumerableExtension</a>
                </td>
                <td />
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_Scene.htm">Scene</a>
                </td>
                <td>
                  <div class="summary">
            A logical representation of a scene (or level) within the game.
            
            This class doesn't contain any fields except for one single identifier.
            However it does contain methods for data acccess as well as lifecycle,
            persistency, ownership and data management. 
            The methods themself do not perform any actions, but wrap the functionality
            of the unterlying database to make it accessible in a way to be easily
            understood by clients.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_SceneChangedEvent.htm">SceneChangedEvent</a>
                </td>
                <td>
                  <div class="summary">
            Static event, where clients can register to, to listen for scene changes.
            Scene changes occur if an entity has been added or removed.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_SceneManager.htm">SceneManager</a>
                </td>
                <td>
                  <div class="summary">
            A Class which manages Scene creation, storage and switches. It also associates each scene
            with a name and a resource manager.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_SceneState.htm">SceneState</a>
                </td>
                <td>
                  <div class="summary">
            Class to store a scene snapshot. Contains serialized scene data (all entities
            assigned to this scene and their configuration) as byte array and the id of the
            scene to which the data belongs to.
            </div>
                </td>
              </tr>
            </table>
          </mtps:CollapsibleArea>
          <mtps:CollapsibleArea runat="server" Title="Interfaces">
            <xml>
              <string id="Title">Interfaces</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Interface</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="interface; public">
                <td>
                  <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_IDomainSystem.htm">IDomainSystem</a>
                </td>
                <td>
                  <div class="summary">
            Interface declaration of a domain system. A domain system handles all the task which
            could appear when using components and entites of a given game domain. E.g. GraphicsSystem
            handles every entity and component which affects the scene to display. Other examples would
            be InputSystem, PhysicsSystem, AudioSystem, etc. They all have to implement this interface.
            It also inherits the IDisposable interface, to give clients the change to clean up their
            resources.
            </div>
                </td>
              </tr>
              <tr data="interface; public">
                <td>
                  <img src="../icons/protinterface.gif" alt="Protected interface" title="Protected interface" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_IGraphicsSystem.htm">IGraphicsSystem</a>
                </td>
                <td>
                  <div class="summary">
            Interface declaration of a domain system with rendering capabilities.
            For more explanation see IDomainSystem.
            </div>
                </td>
              </tr>
              <tr data="interface; public">
                <td>
                  <img src="../icons/pubinterface.gif" alt="Public interface" title="Public interface" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_IResourceManager.htm">IResourceManager</a>
                </td>
                <td>
                  <div class="summary">
            Interface to provide functionality of xna's resource manager, but without
            explicitly using it to avoid dependencies inside this assembly.
            </div>
                </td>
              </tr>
            </table>
          </mtps:CollapsibleArea>
          <mtps:CollapsibleArea runat="server" Title="Delegates">
            <xml>
              <string id="Title">Delegates</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Delegate</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="delegate; public">
                <td>
                  <img src="../icons/pubdelegate.gif" alt="Public delegate" title="Public delegate" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_ComponentChangedEventHandler_1.htm">ComponentChangedEventHandler<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td />
              </tr>
              <tr data="delegate; public">
                <td>
                  <img src="../icons/pubdelegate.gif" alt="Public delegate" title="Public delegate" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_EntityChangedEventHandler.htm">EntityChangedEventHandler</a>
                </td>
                <td />
              </tr>
              <tr data="delegate; public">
                <td>
                  <img src="../icons/pubdelegate.gif" alt="Public delegate" title="Public delegate" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_SceneChangedEventHandler.htm">SceneChangedEventHandler</a>
                </td>
                <td />
              </tr>
              <tr data="delegate; public">
                <td>
                  <img src="../icons/pubdelegate.gif" alt="Public delegate" title="Public delegate" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_ScenesWillSwitchEventHandler.htm">ScenesWillSwitchEventHandler</a>
                </td>
                <td />
              </tr>
            </table>
          </mtps:CollapsibleArea>
          <mtps:CollapsibleArea runat="server" Title="Enumerations">
            <xml>
              <string id="Title">Enumerations</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Enumeration</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="enumeration; public">
                <td>
                  <img src="../icons/privenumeration.gif" alt="Private enumeration" title="Private enumeration" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_Database_IdTypes.htm">Database<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IdTypes</a>
                </td>
                <td />
              </tr>
              <tr data="enumeration; public">
                <td>
                  <img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_EntityEventType.htm">EntityEventType</a>
                </td>
                <td />
              </tr>
              <tr data="enumeration; public">
                <td>
                  <img src="../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" />
                </td>
                <td>
                  <a href="T_Sol2E_Core_SceneEventType.htm">SceneEventType</a>
                </td>
                <td />
              </tr>
            </table>
          </mtps:CollapsibleArea>
        </div>
      </div>
    </div>
  </body>
</html>