<html xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:mtps="http://msdn2.microsoft.com/mtps" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Sol2E.Utils Namespace</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Sol2E.Utils namespace" />
    <meta name="Microsoft.Help.F1" content="Sol2E.Utils" />
    <meta name="Microsoft.Help.Id" content="N:Sol2E.Utils" />
    <meta name="Description" content="This provides utility classes which are used in almost all the other assemblies." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Sol2E.Utils" />
    <meta name="file" content="N_Sol2E_Utils" />
    <meta name="guid" content="N_Sol2E_Utils" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="N:Sol2E.Utils" />
      <MSHelp:TOCTitle Title="Sol2E.Utils Namespace" />
      <MSHelp:RLTitle Title="Sol2E.Utils Namespace ()" />
      <MSHelp:Keyword Index="A" Term="N:Sol2E.Utils" />
      <MSHelp:Keyword Index="A" Term="frlrfSol2EUtils" />
      <MSHelp:Keyword Index="K" Term="Sol2E.Utils namespace" />
      <MSHelp:Keyword Index="F" Term="Sol2E.Utils" />
      <MSHelp:Attr Name="HelpPriority" Value="1" />
      <MSHelp:Attr Name="DevLang" Value="C#" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="This provides utility classes which are used in almost all the other assemblies." />
    </xml>
    <xml id="BrandingData">
      <string id="BrandingProductTitle">Documentation of Sol2E Game Engine generated by Sandcastle</string>
      <string id="BrandingCopyrightText">Documentation of Sol2E Game Engine (c) 2012 by Christoph Kapffer</string>
      <string id="BrandingCopyrightLink" />
      <string id="BrandingCopyrightInfo">Documentation of Sol2E Game Engine (c) 2012 by Christoph Kapffer</string>
      <string id="BrandingHeader">Sol2E.Utils Namespace</string>
      <string id="BrandingFooterText" />
      <string id="BrandingFeedbackAlias" />
      <string id="BrandingFeedbackSubject">Documentation of Sol2E Game Engine generated by Sandcastle</string>
      <string id="BrandingFeedbackText">Send Feedback</string>
      <string id="BrandingFeedbackFooterTo" />
      <string id="BrandingFeedbackFooterText">on this topic.</string>
      <string id="BrandingFeedbackFooterTextTo">on this topic to .</string>
      <string id="BrandingFeedbackBody">Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.</string>
      <list id="BrandingLanguages">
        <value>C#</value>
      </list>
      <list id="BrandingSyntaxLanguages">
        <value>C#</value>
      </list>
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/Presentation.css" />
  </head>
  <body class="primary-mtps-offline-document">
    <div class="topic">
      <div class="majorTitle" />
      <div class="title">Sol2E.Utils Namespace</div>
      <table id="topTable" style="display:none">
        <tr>
          <td id="titleColumn" />
        </tr>
        <tr>
          <td id="runningHeaderColumn" align="right">Documentation of Sol2E Game Engine generated by Sandcastle</td>
        </tr>
      </table>
      <div id="mainSection">
        <div id="mainBody">
          <span class="introStyle">
            <br />
            <br />
          </span>
          <div class="summary">This provides utility classes which are used in almost all the other assemblies.</div>
          <mtps:CollapsibleArea runat="server" Title="Classes">
            <xml>
              <string id="Title">Classes</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Class</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_Cache.htm">Cache</a>
                </td>
                <td>
                  <div class="summary">
            Class to cache unmanaged resources during serialization and deserialization.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_CachedResource_1.htm">CachedResource<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td>
                  <div class="summary">
            Wrapper class to fake serialization of managed resources. Use this, if the underlying
            class is not serializable.
            
            Caution! This works only within one application life cycle. If you want to use this
            to deserialize resources from persistent storage, it won't work, because the cache only
            contains the resource if it was serialized between application start and deserialization
            request.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_CachingEnabled.htm">CachingEnabled</a>
                </td>
                <td>
                  <div class="summary">
            Helper to be able to use using blocks. Ensures that the
            cache gets disabled after exiting context.
            Use it like this:
            
            using (new CachingEnabled())
            {
                Cache.Add(idOfResource, resourceToCache);
            }
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_IDPool.htm">IDPool</a>
                </td>
                <td>
                  <div class="summary">
            Multiton to manage identifiers of different clients.
            Using the multiton pattern there is one pool per key,
            instead of a single id pool for all clients.
            Use it like this: 
            
            IDPool.GetInstance(key)
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_InstanceCreator.htm">InstanceCreator</a>
                </td>
                <td>
                  <div class="summary">
            Factory class which uses reflection to invoke constructors of generic types.
            Used for generic singleton or multiton implementations, or other situations where
            the underlying class is unknown.
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_Multiton_1.htm">Multiton<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td>
                  <div class="summary">
            Generic multiton implementation. See: http://en.wikipedia.org/wiki/Multiton_pattern.
            Mimics a map of singletons. Rather than having a single instance per application
            this allows a single instance per key. Use it like this:
            
            MyMultitonClass : Multiton&lt;MyMultitonClass&gt;
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_Profiler.htm">Profiler</a>
                </td>
                <td>
                  <div class="summary">
            Profiler class, to measure execution time of user specified code.
            Multiple profiler instances can be used simultaniously. If used inside
            a game loop, call static method PeriodicalOutput(elapsedGameTime) every once
            in a while to print the results of all profilers currently running. 
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_Serializer.htm">Serializer</a>
                </td>
                <td>
                  <div class="summary">
            Generic serialization class, which can serialize every object, which either implements the
            ISerializable interface, or is marked with the [Serializable] attribute. 
            
            Binary serialization only! Won't work on XBOX!
            </div>
                </td>
              </tr>
              <tr data="class; public">
                <td>
                  <img src="../icons/pubclass.gif" alt="Public class" title="Public class" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_Singleton_1.htm">Singleton<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span><span class="fs">&lt;'</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span><span class="fs">&gt;</span></span></a>
                </td>
                <td>
                  <div class="summary">
            Generic singleton implementation. Use it like this:
            
            MySingletonClass : Singleton&lt;MySingletonClass&gt;
            </div>
                </td>
              </tr>
            </table>
          </mtps:CollapsibleArea>
          <mtps:CollapsibleArea runat="server" Title="Structures">
            <xml>
              <string id="Title">Structures</string>
            </xml>
            <table id="typeList" class="members">
              <tr>
                <th class="ps_iconColumn">
					 
				</th>
                <th class="ps_nameColumn">Structure</th>
                <th class="ps_descriptionColumn">Description</th>
              </tr>
              <tr data="structure; public">
                <td>
                  <img src="../icons/pubstructure.gif" alt="Public structure" title="Public structure" />
                </td>
                <td>
                  <a href="T_Sol2E_Utils_ProfileContext.htm">ProfileContext</a>
                </td>
                <td>
                  <div class="summary">
            Helper to be able to use using blocks. Ensures that profiler.Stop() gehts called.
            Use it like this:
            
            using (new ProfileContext(profilerInstance))
            {
                DoSomethingAndMeasureExecutionTime();
            }
            </div>
                </td>
              </tr>
            </table>
          </mtps:CollapsibleArea>
        </div>
      </div>
    </div>
  </body>
</html>